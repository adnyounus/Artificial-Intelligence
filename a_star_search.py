# -*- coding: utf-8 -*-
"""A_star_search.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d3NI1vzLX7HqHuQQvHBLaGAUBSsuYiX3
"""

dict_A =	{
   0: 'S',
   1: 'A',
   2: 'B',
   3: 'C',
   4: 'D'
}
#print(dict_A)
#print(type(dict_A))

list_edge_A = [[-1,1,4,-1,-1],  
               [-1,-1,2,5,12],
               [-1,-1,-1,2,-1],
               [-1,-1,-1,-1,3],
               [-1,-1,-1,-1,-1]]

#print(list_edge_A)
#print(type(list_edge_A))    
#print(list_edge_A[1])  

list_heuristic_A = [7,6,2,1,0]
#print(list_heuristic_A[1])

class Node:

  def __init__(self, node_no, prev_node, actual_cost, total_cost):
    self.node_no = node_no
    self.prev_node = prev_node
    self.actual_cost = actual_cost
    self.total_cost = total_cost

source_node = Node(0, None, 0, 7)

class PriorityQueue(object): 
	def __init__(self): 
		self.queue = [] 
  
	def empty(self): 
		return len(self.queue) == [] 
  
	def put(self, Node): 
		self.queue.append(Node) 
  
	def get(self): 
		min = 0		# index number
		for i in range(len(self.queue)): 
			if self.queue[i].total_cost < self.queue[min].total_cost: 
				min = i 
		item = self.queue[min] 
		del self.queue[min] 
		return item 


minQ = PriorityQueue()

minQ.put(source_node)

while not minQ.empty():
  Nob = minQ.get()
  N = Nob.node_no
  if N == 4:
   # print("kam kore")
    print(f'Optimal Path Cost : {Nob.actual_cost}')

    list_path = []
    while Nob.prev_node is not None:
	    list_path.append(dict_A[Nob.node_no])
	    Nob = Nob.prev_node	

    list_path.append('S')
   # print(list_path)
   # rev = list_path.reverse()
    print('Optimal Path :')
    list_path = list_path[::-1]
    for r in list_path:
       print(r)
 
    break

  for i in range(5):
    if list_edge_A[Nob.node_no][i] > 0:
      
      New_node_cost = Nob.actual_cost + list_edge_A[Nob.node_no][i]
      New_node_total = New_node_cost + list_heuristic_A[i]

      NobNew = Node(i, Nob, New_node_cost, New_node_total)
      nen = NobNew
      minQ.put(nen)